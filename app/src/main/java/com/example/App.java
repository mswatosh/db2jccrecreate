/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import java.security.PrivilegedAction;
import java.security.Security;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import javax.security.auth.Subject;
import javax.security.auth.login.Configuration;
import javax.sql.DataSource;
import javax.sql.XAConnection;

import com.ibm.db2.jcc.DB2XAConnection;
import com.ibm.db2.jcc.DB2XADataSource;

import org.ietf.jgss.GSSCredential;

public class App {

    public static void main(String[] args) {
        System.out.println("Begin Demo");
        try {
            Kerberos k = new Kerberos();
            Subject s = k.doKerberosLogin("dbuser");
            GSSCredential gssCred = s.getPrivateCredentials(GSSCredential.class).iterator().next();

            //java.util.Properties properties = new java.util.Properties();
            //properties.put("securityMechanism", new String("11"));// 11 is the integer value for kerberos
            //properties.put("KerberosServerPrincipal", "db2srvc");
            // Class.forName("com.ibm.db2.jcc.DB2Driver");
            String url = "jdbc:db2://machineName/DBName";

            /*
            PrivilegedAction<Void> action = new PrivilegedAction<Void>() {
                @Override
                public Void run() {


                    try {
                        DB2XADataSource xads = new DB2XADataSource();
                        xads.getDB2XAConnection(, properties);
                        Connection con = DriverManager.getConnection("jdbc:db2://10.4.0.5:50000/TESTDB");
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                        e.printStackTrace(System.out);
                    }
                    return null;
                }
            };

            Subject.doAs(s,action);*/

            try {
                DB2XADataSource xads = new DB2XADataSource();
                xads.setDatabaseName ("TESTDB");
                xads.setServerName ("10.4.0.5");
                xads.setDriverType (4);
                xads.setPortNumber (50000);
                xads.setKerberosServerPrincipal("db2srvc");
                xads.setSecurityMechanism((short)11);
                xads.setDefaultIsolationLevel(2);
                System.out.println("Getting DB2XA Connection");
                DB2XAConnection con = xads.getDB2XAConnection(gssCred, null);
                
                PreparedStatement st = con.getConnection().prepareCall("drop table cities");
                try {
                    st.execute();
                } catch (SQLException x) {
                } finally {
                    st.close();
                }
                st = con.getConnection().prepareCall("create table cities (name varchar(50) not null primary key, population int, county varchar(30))");
                st.execute();
                st.close();
                System.out.println("Got DB2XA Connection");
                con.close();

                Connection[] cons = new Connection[3];
                try {
                    cons[0] = xads.getDB2XAConnection(gssCred, null).getConnection();
                    cons[1] = xads.getDB2XAConnection(gssCred, null).getConnection();
                    cons[2] = xads.getDB2XAConnection(gssCred, null).getConnection();

                    String dbProductName = cons[0].getMetaData().getDatabaseProductName().toUpperCase();
                    System.out.println("Product Name is " + dbProductName);

                    // Verify isolation-level="TRANSACTION_READ_COMMITTED" from ibm-web-ext.xml
                    
                    int isolation = cons[0].getTransactionIsolation();
                    System.out.println("Isolation Level is " + isolation);
                    if (isolation != Connection.TRANSACTION_READ_COMMITTED)
                        throw new Exception("The isolation-level of the resource-ref is not honored, instead: " + isolation);

                    PreparedStatement pstmt;
                    pstmt = cons[0].prepareStatement("insert into cities values (?, ?, ?)");
                    pstmt.setString(1, "Edina");
                    pstmt.setInt(2, 47941);
                    pstmt.setString(3, "Hennepin");
                    pstmt.executeUpdate();
                    pstmt.close();

                    pstmt = cons[1].prepareStatement("insert into cities values (?, ?, ?)");
                    pstmt.setString(1, "St. Louis Park");
                    pstmt.setInt(2, 45250);
                    pstmt.setString(3, "Hennepin");
                    pstmt.executeUpdate();
                    pstmt.close();

                    pstmt = cons[2].prepareStatement("insert into cities values (?, ?, ?)");
                    pstmt.setString(1, "Moorhead");
                    pstmt.setInt(2, 38065);
                    pstmt.setString(3, "Clay");
                    pstmt.executeUpdate();
                    pstmt.close();
                } finally {
                    for (Connection con1 : cons)
                    if (con1 != null)
                        try {
                            con1.close();
                        } catch (Throwable x) {
                        }
                }



                Security.setProperty("login.configuration.provider", "com.example.DB2Krb5Configuration");
                DB2Krb5Configuration config = new DB2Krb5Configuration();
                Configuration.setConfiguration(config);  
                System.out.println("Getting XA Connection");
                XAConnection con2 = xads.getXAConnection();
                System.out.println("Got XA Connection");
                st = con2.getConnection().prepareCall("create table cities (name varchar(50) not null primary key, population int, county varchar(30))");
                st.execute();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
                e.printStackTrace(System.out);
            }

            //Security.setProperty("login.configuration.provider", "com.mark.DB2BasicConfiguration");
            //DB2BasicConfiguration config = new DB2BasicConfiguration();
            //Configuration.setConfiguration(config);      
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace(System.out);
        }

    }
}
